package uo.mp.s4.algorithms;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import uo.mp.s4.dome.model.Cd;
import uo.mp.s4.dome.model.Dvd;
import uo.mp.s4.dome.model.VideoGame;
import uo.mp.s4.dome.model.VideoGame.Platform;
import uo.mp.s4.Algorithms;

/**
 * Titulo: Clase SearchTest
 * 
 * @author Omitg
 * @version 26-02-2021
 */
public class SearchTest {
//Atributos:
	/**
	 * Atributo lista
	 */
	private List<Object> objects;
	
	/**
	 * Atributo Dvd
	 */
	private Dvd dvd1;
	
	/**
	 * Atributo Cd
	 */
	private Cd cd1;
	
	/**
	 * Atributo VideoGame
	 */
	private VideoGame vg1;
	
	/**
	 * Creación de atributos para su uso posterior
	 * 
	 * @throws Exception, lanza la excepción en caso de ocurrir un fallo
	 */
	@Before
	public void setUp() throws Exception {
		dvd1 = new Dvd("The Godfather", "F. F. Koppola", 256);
		cd1 = new Cd("Come Together", "Beatles", 4, 70);
		vg1 = new VideoGame("Fifa", "JPK", 4, Platform.NINTENDO);
		objects = new ArrayList<>();
	
		objects.add( 1 );
		objects.add( 'a' );
		objects.add( "Hi" );
		objects.add( new Date() );
		objects.add( dvd1 );
		objects.add( cd1 );
		objects.add( vg1 );
	}
	
	/**
	 * Pruebas del método search de la clase Algorithms:
	 * Pruebas de funcionalidad:
	 * 1- Busca un valor que si esta -> Devuelve la posición
	 * 2- Busca un valor que no esta -> Devuelve -1
	 * 3- Busca un caracter -> Devuelve la posición
	 * 4- Busca una palabra -> Devuelve la posición
	 * 5- Busca un objeto dvd -> Devuelve la posición
	 * 6- Busca un objeto cd -> Devuelve la posición
	 * 7- Busca un objeto videogame -> Devuelve la posición
	 * 
	 * Pruebas de robustez:
	 * 8- Recibe lista null -> Lanza la excepción 
	 * 9- Recibe objeto null -> Lanza la excepción
	 * 10- Recibe ambos null -> Lanza la excepción
	 * 
	 */
	
//Pruebas de funcionalidad:
	/**
	 * 1- Busca un valor que si esta -> Devuelve la posición
	 * GIVEN Se crean objetos y un arrayList, se añaden los objetos a la lista
	 * WHEN Se llama método search con la busqueda de un valor
	 * THEN Se comprueba que la posición esperada es igual a la solución
	 */
	@Test
	public void testOne() {
		int pos = Algorithms.search( objects, 1 );
		assertTrue( pos == 0 );
	}

	/**
	 * 2- Busca un valor que no esta -> Devuelve -1
	 * GIVEN Se crean objetos y un arrayList, se añaden los objetos a la lista
	 * WHEN Se llama método search con la busqueda de un valor que no esta
	 * THEN Se comprueba devuelve -1
	 */
	@Test
	public void tesNonExisting() {
		int pos = Algorithms.search( objects, 25 );
		assertTrue( pos == -1 );
	}

	/**
	 * 3- Busca un caracter -> Devuelve la posición
	 * GIVEN Se crean objetos y un arrayList, se añaden los objetos a la lista
	 * WHEN Se llama método search con la busqueda de un caracter
	 * THEN Se comprueba que la posición esperada es igual a la solución
	 */
	@Test
	public void tesA() {
		int pos = Algorithms.search( objects, 'a' );
		assertTrue( pos == 1 );
	}

	/**
	 * 4- Busca una palabra -> Devuelve la posición
	 * GIVEN Se crean objetos y un arrayList, se añaden los objetos a la lista
	 * WHEN Se llama método search con la busqueda de una palabra
	 * THEN Se comprueba que la posición esperada es igual a la solución
	 */
	@Test
	public void tesHi() {
		int pos = Algorithms.search( objects, "Hi" );
		assertTrue( pos == 2 );
	}

	/**
	 * 5- Busca un objeto dvd -> Devuelve la posición
	 * GIVEN Se crean objetos y un arrayList, se añaden los objetos a la lista
	 * WHEN Se llama método search con la busqueda de un cd
	 * THEN Se comprueba que la posición esperada es igual a la solución
	 */
	@Test
	public void tesDvd() {
		Dvd dvd = new Dvd("The Godfather", "F. F. Koppola", 256);
		int pos = Algorithms.search( objects, dvd );
		assertTrue( pos == 4 );
	}

	/**
	 * 6- Busca un objeto cd -> Devuelve la posición
	 * GIVEN Se crean objetos y un arrayList, se añaden los objetos a la lista
	 * WHEN Se llama método search con la busqueda de un dvd
	 * THEN Se comprueba que la posición esperada es igual a la solución
	 */
	@Test
	public void tesCd() {
		Cd cd = new Cd("Come Together", "Beatles",4, 70);
		int pos = Algorithms.search( objects, cd );
		assertTrue( pos == 5 );
	}

	/**
	 * 7- Busca un objeto videogame -> Devuelve la posición
	 * GIVEN Se crean objetos y un arrayList, se añaden los objetos a la lista
	 * WHEN Se llama método search con la busqueda de un videogame
	 * THEN Se comprueba que la posición esperada es igual a la solución
	 */
	@Test
	public void tesVideoGame() {
		VideoGame vg = new VideoGame("Fifa", "JPK", 4, Platform.NINTENDO);
		int pos = Algorithms.search( objects, vg );
		assertTrue( pos == 6 );
	}
	
//Pruebas de robustez:
	/**
	 * 8- Recibe lista null -> Lanza la excepción
	 * GIVEN Se crean objetos y un arrayList, se añaden los objetos a la lista
	 * WHEN Se llama método search con la lista null
	 * THEN Se lanza la excepción
	 */
	@Test
	(expected =IllegalArgumentException.class)
	public void testNullList() {
		Algorithms.search( null, vg1 );
	}
	
	/**
	 * 9- Recibe objeto null -> Lanza la excepción
	 * GIVEN Se crean objetos y un arrayList, se añaden los objetos a la lista
	 * WHEN Se llama método search con el objeto null
	 * THEN Se lanza la excepción
	 */
	@Test
	(expected =IllegalArgumentException.class)
	public void testNullObject() {
		Algorithms.search( objects, null );
	}
	
	/**
	 * 10- Recibe ambos null -> Lanza la excepción
	 * GIVEN Se crean objetos y un arrayList, se añaden los objetos a la lista
	 * WHEN Se llama método search con la lista y el objeto null
	 * THEN Se lanza la excepción
	 */
	@Test
	(expected =IllegalArgumentException.class)
	public void testNullBoth() {
		Algorithms.search( null, null);
	}
}
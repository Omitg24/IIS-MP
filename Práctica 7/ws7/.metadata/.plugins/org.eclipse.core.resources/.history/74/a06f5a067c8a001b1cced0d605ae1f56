package uo.mp.collections.impl;

import uo.mp.check.ArgumentChecks;
import uo.mp.collections.List;

public class ArrayList implements List {
	
	private final static int INITIAL_CAPACITY = 20;
	
	private Object[] elements;
	private int numberOfElements;
	
	public ArrayList() {	
		elements = new Object[INITIAL_CAPACITY];
		numberOfElements=0;
	}
	
	public ArrayList(int capacity) {
		elements = new Object[capacity];
		numberOfElements=0;
	}
	
	@Override
	public int size() {
		return numberOfElements;
	}

	@Override
	public boolean isEmpty() {
		return size()==0;
	}

	@Override
	public boolean contains(Object o) {
		return indexOf(o)!=-1;
	}

	@Override
    public void add(Object obj) {
		ArgumentChecks.isTrue(obj!=null);
        if(size()>= elements.length) {
            moreMemory(size()+1);
        }else {
        	elements[this.size()]=obj;
        	numberOfElements++;
        }
    }
	
	@Override
	public void add(int index, Object element) {
		ArgumentChecks.bounds(index>=0 && index<=size());		
		ArgumentChecks.isTrue(element!=null);
		if (size()>=elements.length) {
			moreMemory(size()+1);
			for (int i=size();i>index;i--) {
				elements[i]=elements[i-1];
			}
			elements[index]=element;
			numberOfElements++;
		}
	}

	
	private void moreMemory(int numElem) {
        if(numElem > elements.length) {
            Object[] aux = new Object[Math.max(numElem, 2*elements.length)];
            System.arraycopy(elements, 0, aux, 0, elements.length);
            elements=aux;
        }
    }

	@Override
	public boolean remove(Object o) {
		ArgumentChecks.isTrue(o!=null);
		int searched = indexOf(o);
		if (searched!=-1) {
			remove(searched);
			return true;
		}
		return false;
	}

	@Override
	public void clear() {
		for (Object element : elements) {
			remove(element);
		}
		numberOfElements=0;
	}

	@Override
	public Object get(int index) {
		if (isEmpty()) {
			ArgumentChecks.bounds(index>0 && index<size());
		}
		ArgumentChecks.bounds(index>=0 && index<size());
		return elements[index];
	}

	@Override
	public Object set(int index, Object element) {
		if (isEmpty()) {
			ArgumentChecks.bounds(index>0 && index<size());
		}
		ArgumentChecks.bounds(index>=0 && index<size());
		return elements[index]=element;
	}

	
	@Override
	public Object remove(int index) {
		if (isEmpty()) {
			ArgumentChecks.bounds(index>0 && index<size());
		}
		ArgumentChecks.bounds(index>=0 && index<size());
		Object value = elements[index];
		for (int j=index;j<size()-1;j++) {
			elements[j]=elements[j+1];
		}
		numberOfElements--;
		return value;
	}

	@Override
	public int indexOf(Object o) {
		for (int i=0; i<elements.length;i++) {
			if (elements[i].equals(o)) {
				return i;
			}
		}
		return -1;
	}
}

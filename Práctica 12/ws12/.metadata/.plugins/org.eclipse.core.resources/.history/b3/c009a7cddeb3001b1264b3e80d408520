package uo.mp.marker.questions;

import uo.mp.checks.ArgumentChecks;

/**
 * Titulo: Clase Value
 *  
 * @author Omitg
 * @version 29-04-2021
 */
public class Value extends Question{
	/**
	 * Atributo valor
	 */
	private double value;

	/**
	 * Constructor con parámetros de value
	 * 
	 * @param number, numero
	 * @param weight, peso
	 * @param value, valor
	 */
	public Value(int number, double weight, double value) {		
		super(number, weight);
		ArgumentChecks.isTrue(value>0);
		this.value=value;
	}
	
	/**
	 * Método que devuelve el valor de value
	 * 
	 * @return value, valor
	 */
	public double getValue() {
		return value;
	}
	
	/**
	 * Método que comprueba si la respuesta es valida
	 * 
	 * @param answerValue, respuesta
	 * @return true si es valida
	 */
	private boolean isValidValue(double answerValue) {
		double min = getValue()-0.1;
		double max = getValue()+0.1;
		return answerValue>=min && answerValue<=max;
	}
	
	/**
	 * Método que convierte el string a double
	 * 
	 * @param s, string a convertir
	 * @return double, string convertido
	 */
	private double toDouble(String s) {
		return Double.parseDouble(s);
	}
	
	/**
	 * Método que devuelve los datos
	 * 
	 * @return string, cadena	
	 */
	public String toString() {
		return "VALUE: " + super.toString() + ", Value: " + getValue();
	}
	
	/**
	 * Método que devuelve la puntuacion
	 * 
	 * @param answer, respuesta
	 * @return double, peso
	 */
	@Override
	public double getMarkForAnswer(String answer) {
		double aux = toDouble(answer);
		if (isValidValue(aux)) {
			return weight;
		}		
		return 0.0;
	}
}
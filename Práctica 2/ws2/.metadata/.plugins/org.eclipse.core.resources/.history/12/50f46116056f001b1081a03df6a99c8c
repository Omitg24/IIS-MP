package uo.mp.s2.seatmanager.model.seatmanager;

import static org.junit.Assert.assertTrue;

import java.util.ArrayList;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;

import org.junit.Test;

import org.junit.Before;

import uo.mp.s2.seatmanager.model.Person;
import  uo.mp.s2.seatmanager.model.SeatManager;

/**
 * <p>
 * Titulo: Clase FindPassengersByAgeTest
 *   
 * @author Omitg
 * @version 13/02/2021
 */

public class FindPassengersByAgeTest {
	
	/**
	 * Atributo seatManager
	 */
	private SeatManager sm1;
	
	/**
	 * Niño 1
	 */
	private Person child1;
	
	/**
	 * Adulto 1
	 */
	private Person adult1;
	
	/**
	 * Jubilado 1
	 */
	private Person retired1;
	
	/**
	 * Niño 2
	 */
	private Person child2;
	
	/**
	 * Adulto 2
	 */
	private Person adult2;
	
	/**
	 * Jubilado 2
	 */
	private Person retired2;
	
	/**
	 * Niño a sentar
	 */
	private Person childToSeat;
	
	/**
	 * Adulto a sentar
	 */
	private Person adultToSeat;
	
	/**
	 * Jubilado a sentar
	 */
	private Person retiredToSeat;	
	
	@Before
    public void setUp(){
        sm1= new SeatManager(SeatManager.MAX_ROWS, SeatManager.MAX_COLUMNS);
        child1 = new Person ("María", 2);
		adult1 = new Person ("Marta", 24);
		retired1 = new Person ("Jose", 78);
		child2 = new Person ("Pablo", 7);
		adult2 = new Person ("Andres", 20);
		retired2 = new Person ("Juan", 65);
		childToSeat = new Person ("Ines", 12);
		adultToSeat = new Person ("Elsa", 22);
		retiredToSeat = new Person ("Ramon", 82);
    }
	
	/**
	 * Pruebas del método findPassengersByAge de la clase SeatManager:
	 * Positivas (Pruebas de funcionalidad):
	 * 1- Edades dentro de los límites -> Devuelve las personas sentadas en filas pares en el rango de edades 
	 * 2- Edades cubren todos los límites -> Devuelve las personas sentadas en filas pares
	 * 3- No hay nadie sentado en el array -> Devuelve un array vacío
	 * 4- No hay nadie sentado en filas pares -> Devuelve un array vacío
	 * 5- Hay gente sentada en las filas pares -> Devuelve un array con las personas dentro 
	 * 
	 * Negativas (Pruebas de robustez):
	 * 6- Edad mínima inferior a la edad minima posible -> Lanza la excepción
	 * 7- Edad mínima superior a la edad mmáxima posible -> Lanza la excepción
	 * 8- Edad máxima inferior a la edad minima posible -> Lanza la excepción
	 * 9- Edad máxima superior a la edad máxima posible -> Lanza la excepción
	 */
	
	/**
	 * 
	 */
	@Test
	public void testFindPassengersByAgeAgeInLimits() {
		sm1.bookSeat(child1,0,1);
		sm1.bookSeat(adult1,1,3);
		sm1.bookSeat(retired1,6,0);
		sm1.bookSeat(child2,5,3);
		sm1.bookSeat(adult2,4,2);
		sm1.bookSeat(retired2,9,3);
		ArrayList<Person> list = sm1.findPassengersByAge(10, 80);
		assertNotNull(sm1.findPassengersByAge(10, 80));
		assertTrue(list.contains(retired1));
		assertTrue(list.contains(adult2));
	}
}

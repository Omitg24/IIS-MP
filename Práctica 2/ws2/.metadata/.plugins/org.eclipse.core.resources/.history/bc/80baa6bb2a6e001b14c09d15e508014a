package uo.mp.s2.analyzer.wordanalyzer;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import uo.mp.s2.analyzer.model.WordAnalyzer;

/**
 * @author Omitg
 *
 */
public class FirstRepeatedCharacterTest {

	/*
	 * Pruebas para el método firstRepeatedCharacter de la clae Word Analyzer:
	 * 1- Palabra sin caracteres repetidos -> Devuelve 0.
	 * 2- Palabra con caracteres repetidos consecutivos-> Devuelve el caracter
	 * 3- Palabra con caracteres repetidos no consecutivos -> Devolver 0
	 * 4- Palabra varios caracteres repetidos -> Devuelve 0
	 * 5- Palabra con caracteres repetidos consecutivos mas de 2 -> Devuelve el primer caracter que se repite
	 * 6- Palabra con caracteres repetidos al comienzo -> Devuelve el primer caracter que se repite
	 * 7- Palabra con caracteres repetidos al final -> Devuelve el primer caracter que se repite
	 * 8- Palabra con un solo caracter. Devolver 0
	 */
	
	/**
	 * 1- Palabra sin caracteres repetidos -> Devuelve 0.
 	 * GIVEN Analizador recibe una palabra sin caracteres repetidos
	 * WHEN se llama al metodo
	 * THEN devuelve 0
	 */
	@Test
	public void testFirstRepeatedCharacterNoCharactersRepeated() {
		WordAnalyzer analyzer = new WordAnalyzer("hola");
		char r=analyzer.firstRepeatedCharacter();
		assertEquals(0,r);
	}
	
	/**
	 * 2- Palabra con caracteres repetidos consecutivos-> Devuelve el caracter
	 * GIVEN Analizador recibe una palabra con caracteres repetidos consecutivos
	 * WHEN se llama al metodo
	 * THEN devuelve el caracter repetido
	 */

	@Test
	public void testFirstRepeatedCharacterCharactersRepeatedInARow() {
		WordAnalyzer analyzer = new WordAnalyzer("pollo");
		char r=analyzer.firstRepeatedCharacter();
		assertEquals('l',r);
	}
	
	/**
	 * 3- Palabra con caracteres repetidos no consecutivos -> Devolver 0
	 * GIVEN Analizador recibe una palabra con caracteres repetidos no consecutivos
	 * WHEN se llama al metodo
	 * THEN devuelve 0
	 */
	@Test
	public void testFirstRepeatedCharacterCharactersNotInARow() {
		WordAnalyzer analyzer = new WordAnalyzer("naranja");
		char r=analyzer.firstRepeatedCharacter();
		assertEquals(0,r);
	}
	
	/**
	 * 4- Palabra varios caracteres repetidos -> Devuelve 0
	 * GIVEN Analizador recibe una palabra con varios caracteres repetidos no consecutivos
	 * WHEN se llama al metodo
	 * THEN devuelve 0
	 */
	@Test
	public void testFirstRepeatedCharacterCharactersMoreThanOne() {
		WordAnalyzer analyzer = new WordAnalyzer("dromedario");
		char r=analyzer.firstRepeatedCharacter();
		assertEquals(0,r);
	}
	
	/**
	 * 5- Palabra con caracteres repetidos consecutivos mas de 2 -> Devuelve el primer caracter que se repite
	 * GIVEN Analizador recibe una palabra con caracteres repetidos consecutivos
	 * WHEN se llama al metodo
	 * THEN devuelve dicho caracter repetido
	 */
	@Test
	public void testFirstRepeatedCharacterCharactersMoreThanOneRow() {
		WordAnalyzer analyzer = new WordAnalyzer("abbcdd");
		char r=analyzer.firstRepeatedCharacter();
		assertEquals('b',r);
	}
	
	/**
	 * 6- Palabra con caracteres repetidos al comienzo -> Devuelve el primer caracter que se repite
	 * GIVEN Analizador recibe una palabra con caracteres repetidos al principio
	 * WHEN se llama al metodo
	 * THEN devuelve dicho caracter repetido
	 */
	@Test
	public void testFirstRepeatedCharacterCharactersAtTheStart() {
		WordAnalyzer analyzer = new WordAnalyzer("llama");
		char r=analyzer.firstRepeatedCharacter();
		assertEquals('l',r);
	}
	
	/**
	 * 7- Palabra con caracteres repetidos al final -> Devuelve el primer caracter que se repite
	 * GIVEN Analizador recibe una palabra con caracteres repetidos al final
	 * WHEN se llama al metodo
	 * THEN devuelve dicho caracter repetido
	 */
	@Test
	public void testFirstRepeatedCharacterCharactersAtTheEnd() {
		WordAnalyzer analyzer = new WordAnalyzer("motocross");
		char r=analyzer.firstRepeatedCharacter();
		assertEquals('s',r);
	}
	/**
	 * 8- Palabra con un solo caracter. Devolver 0
	 * GIVEN Analizador recibe un unico caracter
	 * WHEN se llama al metodo
	 * THEN devuelve 0
	 */
	 @Test
	 public void testFirstRepeatedCharacterOne() {
		 WordAnalyzer analyzer = new WordAnalyzer("a");
		 char r =analyzer.firstRepeatedCharacter();
		 assertEquals(0,r);
	}

}

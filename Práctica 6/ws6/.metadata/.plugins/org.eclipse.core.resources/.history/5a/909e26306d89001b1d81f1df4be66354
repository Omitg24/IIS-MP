package uo.mp.s6.greenhouse.temperature;

import java.util.ArrayList;
import java.util.List;

/**
 * <p>Title: TemperatureController</p>
 * <p>Description: Clase para realizar el control de la temperatura.</p>
 * <p>Copyright: Copyright (c) 2020</p>
 * <p>Escuela de Ingeniería Informática</p>
 * <p>Metodología de la Programación</p>
 * 
 * @author Profesores de Metodología de la Programación
 * @version 1.0
 */
public class TemperatureController {
	public static final double MAX_TEMPERATURE = 22;
	public static final double MIN_TEMPERATURE = 19;

	private List<TemperatureSensor> sensors = new ArrayList<>();
	private List<Doorable> doors = new ArrayList<>();

	public void add(TemperatureSensor sensor) {
		this.sensors.add(sensor);
	}

	public void add(Doorable door) {
		this.doors.add(door);
	}

	/**
	 * Maneja las puertas para mantener la temperatura bajo control
	 */
	public void monitor() {		
		/*
		 * Fuera hace frío, por lo que la apertura de las puertas siempre implica enfriar el interior.
		 * 
		 * Cuando getAverageTemperature() es mayor que MAX_TEMPERATURE) 
			• Deberían abrirse algunas puertas para bajar la temperatura (si es posible)
			• Cada grado de diferencia (getAverageTemperature()-MAX_TEMPERATURE)) 
			     implica la apertura del 10% de las puertas (si es posible)
			• Mostrar un mensaje que indique cuántas puertas están a punto de abrirse (si es posible)
		 * 
		 Cuando getAverageTemperature() es menor que MIN_TEMPERATURE 
			• Deberían cerrarse algunas puertas para aumentar la temperatura (si es posible)
			• Cada grado de diferencia (MIN_TEMPERATURE-getAverageTemperature()) 
			     implica el cierre del 10% de las puertas (si es posible)
			• Mostrar un mensaje que indique cuántas puertas están a punto de cerrarse (si es posible)
		 *
		 * En caso contrario, se mostrará un mensaje  que indique simplemente la temperatura media
		 */
		double temp = getAverageTemperature();
		if (temp > MAX_TEMPERATURE) {
			coolDown(temp);
		} else if (temp < MIN_TEMPERATURE){
			warmUp (temp);
		} else {
			doNothing();
		}
	}
	
	/**
	 * Método que enfría el invernadero
	 * 
	 * @param temp, temperatura a enfriar
	 */
	private void coolDown(double temp) {
		double diff = temp - MAX_TEMPERATURE;
		int doorsPerDegree = (int) (doors.size()*0.1);
		int doorsToOpen = (int) (doorsPerDegree * diff);
		System.out.println(doorsToOpen + " puertas necesitan ser abiertas");
		openDoors(doorsToOpen);
	}
	
	private void warmUp(double temp) {
		double diff = MIN_TEMPERATURE - temp;
		int doorsPerDegree = (int) (doors.size()*0.1);
		int doorsToClose = (int) (doorsPerDegree * diff);
		System.out.println(doorsToClose + " puertas necesitan ser cerradas");
		closeDoors(doorsToClose);
	}
	
	private void doNothing() {		
		System.out.println("La temperatura " + getAverageTemperature() + "es correcta");
	}
	
	private void openDoors(int doorsToOpen) { 
		int count=0;
		for (int i=0; count < doorsToOpen && i < doors.size();i++) {
			if (!doors.get(i).isOpened()) {
				doors.get(i).open();
				count++;
			}
		}
		if (count < doorsToOpen) {
			System.out.println("ATENCIÓN. No hay mas puertas para abrir");
		}
	}
	
	private void closeDoors(int doorsToClose) {
		int count = 0;		
		for (int i=0; count < doorsToClose && i < doors.size();i++) {
			if (!doors.get(i).isClosed()) {
				doors.get(i).close();
				count++;
			}
		}
		if (count < doorsToClose) {
			System.out.println("ATENCIÓN. No hay mas puertas para cerrar");
		}
	}

	/**
	 * Calcula la temperatura media en el invernadero.
	 * 
	 * @return la temperatura media en el invernadero.
	 */
	private double getAverageTemperature() {
		double addition = 0;
		for(TemperatureSensor sensor : sensors) {
			addition += sensor.getTemperature();
		}
		return addition / sensors.size();
	}

}
